{"version":3,"sources":["components/BgTracker.js","App.js","serviceWorker.js","index.js"],"names":["BgTracker","fetchUrl","state","isLoading","countrydata","countrynewsitems","resultsElement","total_cases","total_recovered","total_deaths","total_unresolved","total_new_cases_today","total_new_deaths_today","total_active_cases","total_serius_cases","style","textAlign","Date","toLocaleDateString","Alert","variant","Heading","href","fetch","this","then","res","json","setState","console","log","Container","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4UA6EeA,E,2MAzEXC,SAAW,uD,EAEXC,MAAQ,CACJC,WAAW,EACXC,YAAa,GACbC,iBAAkB,I,EAetBC,eAAiB,WAAO,IAAD,EAUf,EAAKJ,MAAME,YARXG,EAFe,EAEfA,YACAC,EAHe,EAGfA,gBAEAC,GALe,EAIfC,iBAJe,EAKfD,cACAE,EANe,EAMfA,sBACAC,EAPe,EAOfA,uBACAC,EARe,EAQfA,mBARe,EASfC,mBAIJ,OACI,yBAAKC,MAAO,CAACC,UAAW,WACpB,8DAAmC,6BAAnC,qDACA,6BAAK,IAAIC,MAAOC,mBAAmB,OAEnC,kBAACC,EAAA,EAAD,CAAOC,QAAQ,aACX,kBAACD,EAAA,EAAME,QAAP,0FAAiCd,IAErC,kBAACY,EAAA,EAAD,CAAOC,QAAQ,UACX,kBAACD,EAAA,EAAME,QAAP,yFAAgCZ,IAEpC,kBAACU,EAAA,EAAD,CAAOC,QAAQ,WACX,kBAACD,EAAA,EAAME,QAAP,sEAA4Bb,IAEhC,kBAACW,EAAA,EAAD,CAAOC,QAAQ,WACX,kBAACD,EAAA,EAAME,QAAP,yFAAgCR,IAEpC,kBAACM,EAAA,EAAD,CAAOC,QAAQ,UACX,kBAACD,EAAA,EAAME,QAAP,kGAAoCV,IAExC,kBAACQ,EAAA,EAAD,CAAOC,QAAQ,UACX,kBAACD,EAAA,EAAME,QAAP,oHAAuCT,IAE3C,+BAAO,uBAAGU,KAAM,mCAAT,U,mFAhDE,IAAD,OAChBC,MAAMC,KAAKvB,UACNwB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACF,EAAKC,SAAS,CAACxB,YAAauB,EAAKvB,YAAY,KAC7C,EAAKwB,SAAS,CAACvB,iBAAkBsB,EAAKtB,iBAAiB,KACvD,EAAKuB,SAAS,CAACzB,WAAW,OAC3BsB,MAAK,WACRI,QAAQC,IAAI,EAAK5B,Y,+BA+CrB,OADA2B,QAAQC,IAAIN,KAAKtB,MAAME,YAAX,aAER,kBAAC2B,EAAA,EAAD,KACKP,KAAKtB,MAAMC,UACN,0CACAqB,KAAKlB,sB,GApEH0B,aCWTC,MARf,WACE,OACI,6BACE,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.e250e914.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Alert, Container} from 'react-bootstrap';\r\n\r\nclass BgTracker extends Component {\r\n    fetchUrl = \"https://thevirustracker.com/free-api?countryTotal=BG\";\r\n\r\n    state = {\r\n        isLoading: true,\r\n        countrydata: {},\r\n        countrynewsitems: {},\r\n    };\r\n\r\n    componentDidMount() {\r\n        fetch(this.fetchUrl)\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                this.setState({countrydata: json.countrydata[0]});\r\n                this.setState({countrynewsitems: json.countrynewsitems[0]});\r\n                this.setState({isLoading: false});\r\n            }).then(() => {\r\n            console.log(this.state);\r\n        });\r\n    }\r\n\r\n    resultsElement = () => {\r\n        const {\r\n            total_cases,\r\n            total_recovered,\r\n            total_unresolved,\r\n            total_deaths,\r\n            total_new_cases_today,\r\n            total_new_deaths_today,\r\n            total_active_cases,\r\n            total_serius_cases,\r\n        } = this.state.countrydata;\r\n\r\n\r\n        return (\r\n            <div style={{textAlign: 'center'}}>\r\n                <h1>COVID-19/2019-nCoV/Coronavirus <br/> България</h1>\r\n                <h4>{new Date().toLocaleDateString(\"bg\")}</h4>\r\n\r\n                <Alert variant=\"secondary\">\r\n                    <Alert.Heading>Общ брой случаи: {total_cases}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Смъртни случаи: {total_deaths}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"success\">\r\n                    <Alert.Heading>Излекувани: {total_recovered}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"primary\">\r\n                    <Alert.Heading>Активни случаи: {total_active_cases}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Нови случаи (днес): {total_new_cases_today}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Смъртни случаи (днес): {total_new_deaths_today}</Alert.Heading>\r\n                </Alert>\r\n                <small><a href={\"https://thevirustracker.com/api\"}>api</a></small>\r\n            </div>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        console.log(this.state.countrydata[\"total_cases\"]);\r\n        return (\r\n            <Container>\r\n                {this.state.isLoading\r\n                    ? <h4>Loading...</h4>\r\n                    : this.resultsElement()}\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BgTracker;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport BgTracker from \"./components/BgTracker\";\r\n\r\nfunction App() {\r\n  return (\r\n      <div>\r\n        <BgTracker/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}