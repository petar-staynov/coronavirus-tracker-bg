{"version":3,"sources":["components/Footer.js","data/countriesData.js","components/Header.js","components/ApexChart.js","components/Tracker.js","App.js","serviceWorker.js","index.js"],"names":["Footer","style","textAlign","href","Component","countriesData","GLOBAL","AF","AL","DZ","AO","AR","AM","AU","AT","AZ","BS","BD","BY","BE","BZ","BJ","BT","BO","BA","BW","BR","BN","BG","BF","BI","KH","CM","CA","CI","CF","TD","CL","CN","CO","CG","CD","CR","HR","CU","CY","CZ","DK","DP","DJ","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FJ","FI","FR","GF","TF","GA","GM","GE","DE","GH","GR","GL","GT","GN","GW","GY","HT","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IL","IT","JM","JP","JO","KZ","KE","XK","KW","KG","LA","LV","LB","LS","LR","LY","LT","LU","MK","MG","MW","MY","ML","MR","MX","MD","MN","ME","MA","MZ","MM","NA","NP","NL","NC","NZ","NI","NE","NG","KP","NO","OM","PK","PS","PA","PG","PY","PE","PH","PL","PT","PR","QA","RO","RU","RW","SA","SN","RS","SL","SG","SK","SI","SB","SO","ZA","KR","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TT","TN","TR","TM","AE","UG","GB","UA","US","UY","UZ","VU","VE","VN","EH","YE","ZM","ZW","Header","props","country","setCountry","marginBottom","Date","toLocaleDateString","DropdownButton","id","variant","size","title","Object","keys","map","key","Dropdown","Item","onClick","ApexChart","useState","series","name","data","options","chart","height","type","zoom","enabled","dataLabels","stroke","curve","text","align","grid","row","colors","opacity","xaxis","categories","componentState","setComponentState","useEffect","chartData","length","timeline","skipUntilNow","old_total_cases","timelineShort","timelineDates","timelineDateCases","forEach","dayInfo","new_daily_cases","total_cases","new_daily_deaths","total_recoveries","total_deaths","push","dateParams","split","dateFormated","pop","width","Math","max","window","screen","innerWidth","calculateElementHeight","Tracker","countryData","loadStatus","axios","get","toUpperCase","then","res1","res2","todayData","countryInfo","timelineItems","countryCode","code","catch","e","res","results","total_recovered","total_new_cases_today","total_new_deaths_today","total_active_cases","deathPerc","toFixed","isFinite","recPerc","newPerc","resultElement","Alert","Heading","target","App","localStorage","getItem","setItem","setCountryHandle","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.ad9f2cd9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{textAlign: 'center'}}>\r\n                <small><a href={\"https://thevirustracker.com/api\"}>api</a></small>\r\n                <br/>\r\n                <small><a href={\"https://github.com/petar-staynov/coronavirus-tracker-bg\"}>GitHub</a></small>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","export const countriesData = {\r\n    GLOBAL: \"GLOBAL\",\r\n    AF: \"Afghanistan\",\r\n    AL: \"Albania\",\r\n    DZ: \"Algeria\",\r\n    AO: \"Angola\",\r\n    AR: \"Argentina\",\r\n    AM: \"Armenia\",\r\n    AU: \"Australia\",\r\n    AT: \"Austria\",\r\n    AZ: \"Azerbaijan\",\r\n    BS: \"Bahamas\",\r\n    BD: \"Bangladesh\",\r\n    BY: \"Belarus\",\r\n    BE: \"Belgium\",\r\n    BZ: \"Belize\",\r\n    BJ: \"Benin\",\r\n    BT: \"Bhutan\",\r\n    BO: \"Bolivia\",\r\n    BA: \"Bosnia and Herzegovina\",\r\n    BW: \"Botswana\",\r\n    BR: \"Brazil\",\r\n    BN: \"Brunei Darussalam\",\r\n    BG: \"Bulgaria\",\r\n    BF: \"Burkina Faso\",\r\n    BI: \"Burundi\",\r\n    KH: \"Cambodia\",\r\n    CM: \"Cameroon\",\r\n    CA: \"Canada\",\r\n    CI: \"Ivory Coast\",\r\n    CF: \"Central African Republic\",\r\n    TD: \"Chad\",\r\n    CL: \"Chile\",\r\n    CN: \"China\",\r\n    CO: \"Colombia\",\r\n    CG: \"Congo\",\r\n    CD: \"Democratic Republic of Congo\",\r\n    CR: \"Costa Rica\",\r\n    HR: \"Croatia\",\r\n    CU: \"Cuba\",\r\n    CY: \"Cyprus\",\r\n    CZ: \"Czech Republic\",\r\n    DK: \"Denmark\",\r\n    DP: \"Diamond Princess\",\r\n    DJ: \"Djibouti\",\r\n    DO: \"Dominican Republic\",\r\n    EC: \"Ecuador\",\r\n    EG: \"Egypt\",\r\n    SV: \"El Salvador\",\r\n    GQ: \"Equatorial Guinea\",\r\n    ER: \"Eritrea\",\r\n    EE: \"Estonia\",\r\n    ET: \"Ethiopia\",\r\n    FK: \"Falkland Islands\",\r\n    FJ: \"Fiji\",\r\n    FI: \"Finland\",\r\n    FR: \"France\",\r\n    GF: \"French Guiana\",\r\n    TF: \"French Southern Territories\",\r\n    GA: \"Gabon\",\r\n    GM: \"Gambia\",\r\n    GE: \"Georgia\",\r\n    DE: \"Germany\",\r\n    GH: \"Ghana\",\r\n    GR: \"Greece\",\r\n    GL: \"Greenland\",\r\n    GT: \"Guatemala\",\r\n    GN: \"Guinea\",\r\n    GW: \"Guinea-Bissau\",\r\n    GY: \"Guyana\",\r\n    HT: \"Haiti\",\r\n    HN: \"Honduras\",\r\n    HK: \"Hong Kong\",\r\n    HU: \"Hungary\",\r\n    IS: \"Iceland\",\r\n    IN: \"India\",\r\n    ID: \"Indonesia\",\r\n    IR: \"Iran\",\r\n    IQ: \"Iraq\",\r\n    IE: \"Ireland\",\r\n    IL: \"Israel\",\r\n    IT: \"Italy\",\r\n    JM: \"Jamaica\",\r\n    JP: \"Japan\",\r\n    JO: \"Jordan\",\r\n    KZ: \"Kazakhstan\",\r\n    KE: \"Kenya\",\r\n    XK: \"Kosovo\",\r\n    KW: \"Kuwait\",\r\n    KG: \"Kyrgyzstan\",\r\n    LA: \"Lao\",\r\n    LV: \"Latvia\",\r\n    LB: \"Lebanon\",\r\n    LS: \"Lesotho\",\r\n    LR: \"Liberia\",\r\n    LY: \"Libya\",\r\n    LT: \"Lithuania\",\r\n    LU: \"Luxembourg\",\r\n    MK: \"Macedonia\",\r\n    MG: \"Madagascar\",\r\n    MW: \"Malawi\",\r\n    MY: \"Malaysia\",\r\n    ML: \"Mali\",\r\n    MR: \"Mauritania\",\r\n    MX: \"Mexico\",\r\n    MD: \"Moldova\",\r\n    MN: \"Mongolia\",\r\n    ME: \"Montenegro\",\r\n    MA: \"Morocco\",\r\n    MZ: \"Mozambique\",\r\n    MM: \"Myanmar\",\r\n    NA: \"Namibia\",\r\n    NP: \"Nepal\",\r\n    NL: \"Netherlands\",\r\n    NC: \"New Caledonia\",\r\n    NZ: \"New Zealand\",\r\n    NI: \"Nicaragua\",\r\n    NE: \"Niger\",\r\n    NG: \"Nigeria\",\r\n    KP: \"North Korea\",\r\n    NO: \"Norway\",\r\n    OM: \"Oman\",\r\n    PK: \"Pakistan\",\r\n    PS: \"Palestine\",\r\n    PA: \"Panama\",\r\n    PG: \"Papua New Guinea\",\r\n    PY: \"Paraguay\",\r\n    PE: \"Peru\",\r\n    PH: \"Philippines\",\r\n    PL: \"Poland\",\r\n    PT: \"Portugal\",\r\n    PR: \"Puerto Rico\",\r\n    QA: \"Qatar\",\r\n    RO: \"Romania\",\r\n    RU: \"Russia\",\r\n    RW: \"Rwanda\",\r\n    SA: \"Saudi Arabia\",\r\n    SN: \"Senegal\",\r\n    RS: \"Serbia\",\r\n    SL: \"Sierra Leone\",\r\n    SG: \"Singapore\",\r\n    SK: \"Slovakia\",\r\n    SI: \"Slovenia\",\r\n    SB: \"Solomon Islands\",\r\n    SO: \"Somalia\",\r\n    ZA: \"South Africa\",\r\n    KR: \"South Korea\",\r\n    SS: \"South Sudan\",\r\n    ES: \"Spain\",\r\n    LK: \"Sri Lanka\",\r\n    SD: \"Sudan\",\r\n    SR: \"Suriname\",\r\n    SJ: \"Svalbard and Jan Mayen\",\r\n    SZ: \"Swaziland\",\r\n    SE: \"Sweden\",\r\n    CH: \"Switzerland\",\r\n    SY: \"Syrian Arab Republic\",\r\n    TW: \"Taiwan\",\r\n    TJ: \"Tajikistan\",\r\n    TZ: \"Tanzania\",\r\n    TH: \"Thailand\",\r\n    TL: \"Timor-Leste\",\r\n    TG: \"Togo\",\r\n    TT: \"Trinidad and Tobago\",\r\n    TN: \"Tunisia\",\r\n    TR: \"Turkey\",\r\n    TM: \"Turkmenistan\",\r\n    AE: \"UAE\",\r\n    UG: \"Uganda\",\r\n    GB: \"United Kingdom\",\r\n    UA: \"Ukraine\",\r\n    US: \"USA\",\r\n    UY: \"Uruguay\",\r\n    UZ: \"Uzbekistan\",\r\n    VU: \"Vanuatu\",\r\n    VE: \"Venezuela\",\r\n    VN: \"Vietnam\",\r\n    EH: \"Western Sahara\",\r\n    YE: \"Yemen\",\r\n    ZM: \"Zambia\",\r\n    ZW: \"Zimbabwe\",\r\n};","import React from 'react';\r\nimport {countriesData} from \"../data/countriesData\";\r\nimport {DropdownButton, Dropdown} from \"react-bootstrap\";\r\n\r\nconst Header = (props) => {\r\n    const {country, setCountry} = props;\r\n\r\n    return (\r\n        <div style={{marginBottom: \"8px\"}}>\r\n            <h1>COVID-19/2019-nCoV/Coronavirus <br/></h1>\r\n            <h4>{new Date().toLocaleDateString(country)}</h4>\r\n\r\n            <DropdownButton\r\n                id=\"dropdown-basic-button\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                title={countriesData[country]}>\r\n                {Object.keys(countriesData).map(key => {\r\n                    return (\r\n                        <Dropdown.Item\r\n                            onClick={() => setCountry(key)}\r\n                            key={key}>{countriesData[key]}</Dropdown.Item>\r\n                    )\r\n                })}\r\n            </DropdownButton>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","import React, {useEffect, useState} from \"react\";\r\nimport Chart from 'react-apexcharts'\r\n\r\nconst ApexChart = (props) => {\r\n    const [componentState, setComponentState] = useState(\r\n        {\r\n            series: [{\r\n                name: \"Coronavirus cases\",\r\n                data: [],\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    height: 350,\r\n                    type: 'line',\r\n                    zoom: {\r\n                        enabled: false\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                stroke: {\r\n                    curve: 'straight'\r\n                },\r\n                title: {\r\n                    text: `Общ брой случаи по дата:`,\r\n                    align: 'center'\r\n                },\r\n                grid: {\r\n                    row: {\r\n                        colors: ['#f3f3f3', 'transparent'], // takes an array which will be repeated on columns\r\n                        opacity: 0.5\r\n                    },\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                }\r\n            },\r\n        });\r\n\r\n    useEffect(() => {\r\n        const {chartData} = props;\r\n        if (Object.keys(chartData).length <= 0) return undefined;\r\n\r\n        const timeline = chartData.timeline;\r\n\r\n        //Extract data for chart\r\n        let skipUntilNow = true;\r\n        let old_total_cases = null;\r\n\r\n        let timelineShort = [];\r\n        let timelineDates = []; //IMP\r\n        let timelineDateCases = []; //IMP\r\n        Object.keys(timeline).forEach((key) => {\r\n            const dayInfo = timeline[key];\r\n            const {\r\n                new_daily_cases,\r\n                new_daily_deaths,\r\n                total_cases,\r\n                total_recoveries,\r\n                total_deaths\r\n            } = dayInfo;\r\n\r\n            const activeCases = total_cases - (total_recoveries + total_deaths);\r\n\r\n            //Skip INITIAL dates without reported numbers\r\n            if (new_daily_cases > 0) skipUntilNow = false;\r\n            if (!skipUntilNow) {\r\n                if (total_cases !== old_total_cases) {\r\n                    timelineShort.push(dayInfo);\r\n\r\n                    //turn date key \"1/23/2020\" to \"23/1\" format\r\n                    const dateParams = key.split('/');\r\n                    const dateFormated = `${dateParams[1]}/${dateParams[0]}`;\r\n                    timelineDates.push(dateFormated);\r\n\r\n                    timelineDateCases.push(total_cases);\r\n                    old_total_cases = total_cases;\r\n                }\r\n            }\r\n        });\r\n\r\n        //Remove last \"stat\" element from array which come from api\r\n        timelineDates.pop();\r\n        timelineDateCases.pop();\r\n\r\n        setComponentState({\r\n            ...componentState,\r\n            series: [{\r\n                ...componentState.series,\r\n                data: timelineDateCases,\r\n            }],\r\n            options: {\r\n                ...componentState.options,\r\n                xaxis: {\r\n                    categories: timelineDates,\r\n                }\r\n            }\r\n        });\r\n    }, [props]);\r\n\r\n    const calculateElementHeight = () => {\r\n        let width = Math.max(window.screen.width, window.innerWidth);\r\n\r\n        if (width >= 1200) {\r\n            return 640;\r\n        } else if (width >= 992) {\r\n            return 640;\r\n        } else if (width >= 768) {\r\n            return 576;\r\n        } else if (width >= 576) {\r\n            return 480;\r\n        } else {\r\n            return 360;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Chart options={componentState.options}\r\n               series={componentState.series}\r\n               type=\"bar\"\r\n               width={\"100%\"}\r\n               height={calculateElementHeight()}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ApexChart;","import React, {useEffect, useState} from 'react';\r\nimport axios from 'axios';\r\nimport {Alert} from \"react-bootstrap\";\r\nimport ApexChart from \"./ApexChart\";\r\n\r\nconst Tracker = (props) => {\r\n    // console.log('Tracker render with country ' + props.country);\r\n    const {country} = props;\r\n\r\n\r\n    const [componentState, setComponentState] = useState(\r\n        {\r\n            countryData: {},\r\n            chartData: {},\r\n            loadStatus: \"loading\",\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        // console.log(\"Parse country data for \" + country);\r\n        if (country === \"GLOBAL\") {\r\n            axios.get(\"https://thevirustracker.com/free-api?global=stats\")\r\n                .then(res => {\r\n                    const {data} = res;\r\n\r\n                    setComponentState({\r\n                        ...componentState,\r\n                        countryData: data.results[0],\r\n                        loadStatus: \"completed\"\r\n                    });\r\n                })\r\n                .catch(e => setComponentState({\r\n                    ...componentState, loadStatus: \"error\"\r\n                }));\r\n            return;\r\n        }\r\n\r\n\r\n        axios.get(`https://thevirustracker.com/free-api?countryTotal=${country.toUpperCase()}`)\r\n            .then(res1 => {\r\n                axios.get(`https://thevirustracker.com/free-api?countryTimeline=${country.toUpperCase()}`)\r\n                    .then(res2 => {\r\n                        const todayData = res1.data;\r\n                        const chartData = res2.data;\r\n\r\n                        const countryInfo = chartData[\"countrytimelinedata\"][0][\"info\"];\r\n                        const timelineItems = chartData[\"timelineitems\"][0];\r\n\r\n                        setComponentState({\r\n                            ...componentState,\r\n                            countryData: todayData[\"countrydata\"][0],\r\n                            chartData: {\r\n                                country: countryInfo.title,\r\n                                countryCode: countryInfo.code,\r\n                                timeline: timelineItems,\r\n                            },\r\n                            loadStatus: \"completed\",\r\n                        });\r\n                    })\r\n            })\r\n            .catch(e => setComponentState({\r\n                ...componentState, loadStatus: \"error\"\r\n            }));\r\n\r\n\r\n    }, [props]);\r\n\r\n\r\n    const {\r\n        total_cases,\r\n        total_recovered,\r\n        // total_unresolved,\r\n        total_deaths,\r\n        total_new_cases_today,\r\n        total_new_deaths_today,\r\n        total_active_cases,\r\n        // total_serius_cases,\r\n    } = componentState.countryData;\r\n\r\n    let deathPerc = ((total_deaths / total_cases) * 100).toFixed(2);\r\n    deathPerc = isFinite(deathPerc) ? deathPerc : 0;\r\n\r\n    let recPerc = ((total_recovered / total_cases) * 100).toFixed(2);\r\n    recPerc = isFinite(recPerc) ? recPerc : 0;\r\n\r\n    let newPerc = ((total_new_cases_today / total_cases) * 100).toFixed(2);\r\n    newPerc = isFinite(newPerc) ? newPerc : 0;\r\n\r\n    let resultElement = <h4>Зареждане...</h4>;\r\n\r\n    if (componentState.loadStatus === \"completed\") {\r\n        resultElement = (\r\n            <div>\r\n                <Alert variant=\"secondary\">\r\n                    <Alert.Heading>Общ брой случаи: {total_cases}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Смъртни случаи: {total_deaths} ({deathPerc}%)</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"success\">\r\n                    <Alert.Heading>Излекувани: {total_recovered} ({recPerc}%)</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"primary\">\r\n                    <Alert.Heading>Активни случаи: {total_active_cases}</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Нови случаи (днес): {total_new_cases_today} (+{newPerc}%)</Alert.Heading>\r\n                </Alert>\r\n                <Alert variant=\"danger\">\r\n                    <Alert.Heading>Смъртни случаи (днес): {total_new_deaths_today}</Alert.Heading>\r\n                </Alert>\r\n                {\r\n                    props.country === \"GLOBAL\"\r\n                        ? (<h4>\r\n                            <a href=\"https://www.worldometers.info/coronavirus/\" target=\"_blank\">\r\n                                За таблица виж тук: www.worldometers.info/coronavirus/</a>\r\n                        </h4>)\r\n                        : <ApexChart chartData={componentState.chartData}/>\r\n                }\r\n            </div>\r\n        );\r\n    } else if (componentState.loadStatus === \"error\") {\r\n        resultElement = (<h4>Грешка при зареждането, моля опитайте по-късно.</h4>)\r\n    }\r\n\r\n//<ApexChart chartData={componentState.chartData}/>\r\n    return (\r\n        <div>\r\n            {resultElement}\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Tracker;","import React, {useState} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport Footer from \"./components/Footer\";\r\nimport Header from \"./components/Header\";\r\nimport Tracker from \"./components/Tracker\";\r\n\r\nconst App = () => {\r\n    if (!localStorage.getItem(\"country\")) {\r\n        localStorage.setItem(\"country\", \"BG\")\r\n    }\r\n\r\n    const [country, setCountry] = useState(localStorage.getItem(\"country\"));\r\n\r\n    const setCountryHandle = (country) => {\r\n        localStorage.setItem(\"country\", country);\r\n        // console.log('Update App Country');\r\n        setCountry(country);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container text-center\">\r\n            <Header country={country} setCountry={setCountryHandle}/>\r\n            <Tracker country={country} setCountry={setCountryHandle}/>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}