{"version":3,"sources":["components/Footer/Footer.js","data/countriesData.js","contexts/AppContext.js","components/Header/Header.js","common/LoadingStatus.js","components/ChartsContainer.js","components/Tracker/Tracker.js","App.js","serviceWorker.js","index.js"],"names":["Footer","style","textAlign","href","Component","countriesData","GLOBAL","AF","AL","DZ","AO","AR","AM","AU","AT","AZ","BS","BD","BY","BE","BZ","BJ","BT","BO","BA","BW","BR","BN","BG","BF","BI","KH","CM","CA","CI","CF","TD","CL","CN","CO","CG","CD","CR","HR","CU","CY","CZ","DK","DP","DJ","DO","EC","EG","SV","GQ","ER","EE","ET","FK","FJ","FI","FR","GF","TF","GA","GM","GE","DE","GH","GR","GL","GT","GN","GW","GY","HT","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IL","IT","JM","JP","JO","KZ","KE","XK","KW","KG","LA","LV","LB","LS","LR","LY","LT","LU","MK","MG","MW","MY","ML","MR","MX","MD","MN","ME","MA","MZ","MM","NA","NP","NL","NC","NZ","NI","NE","NG","KP","NO","OM","PK","PS","PA","PG","PY","PE","PH","PL","PT","PR","QA","RO","RU","RW","SA","SN","RS","SL","SG","SK","SI","SB","SO","ZA","KR","SS","ES","LK","SD","SR","SJ","SZ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TT","TN","TR","TM","AE","UG","GB","UA","US","UY","UZ","VU","VE","VN","EH","YE","ZM","ZW","AppContext","createContext","CountryDataProvider","props","useState","countryData","setCountryData","timelineData","setTimelineData","localStorage","getItem","country","setCountry","status","setStatus","Provider","value","children","Header","useContext","marginBottom","Date","toLocaleDateString","DropdownButton","id","variant","size","title","Object","keys","map","key","Dropdown","Item","onClick","countryKey","setItem","ChartsContainer","totalCasesChart","series","data","options","chart","type","height","plotOptions","bar","horizontal","dataLabels","enabled","xaxis","categories","totalDeathCasesChart","totalRecoveredCasesChart","totalActiveCasesChart","newCasesChart","componentState","setComponentState","useEffect","length","o","timelineItems","timeline","skipEmptyDays","datesArr","totalCasesArr","newCasesArr","totalActiveCasesArr","timelineItemsSorted","sort","reduce","r","k","numberOfDates","lastIndex","lastTotalCases","forEach","date","index","dayInfo","totalCases","Math","abs","total_cases","newDailyCases","activeCases","total_recoveries","total_deaths","push","calculateElementHeight","className","width","Tracker","a","fetch","then","res","body","reader","getReader","read","done","close","str","i","String","fromCharCode","parseInt","JSON","parse","json","results","globalDataResult","console","log","fetchDataGlobal","catch","e","countryDataResult","timelineItemsResult","countryInfo","timelineItemsFormated","item","dateFormatted","toISOString","slice","countryCode","code","fetchData","total_recovered","total_unresolved","total_new_cases_today","total_new_deaths_today","total_active_cases","deathPerc","total_serius_cases","toFixed","isFinite","recPerc","newPerc","countryHasData","useMemo","Alert","Heading","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8a68379e.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{textAlign: 'center'}}>\r\n                <small><a href={\"https://thevirustracker.com/api\"}>api</a></small>\r\n                <br/>\r\n                <small><a href={\"https://github.com/petar-staynov/coronavirus-tracker-bg\"}>GitHub</a></small>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","export const countriesData = {\r\n    GLOBAL: \"GLOBAL\",\r\n    AF: \"Afghanistan\",\r\n    AL: \"Albania\",\r\n    DZ: \"Algeria\",\r\n    AO: \"Angola\",\r\n    AR: \"Argentina\",\r\n    AM: \"Armenia\",\r\n    AU: \"Australia\",\r\n    AT: \"Austria\",\r\n    AZ: \"Azerbaijan\",\r\n    BS: \"Bahamas\",\r\n    BD: \"Bangladesh\",\r\n    BY: \"Belarus\",\r\n    BE: \"Belgium\",\r\n    BZ: \"Belize\",\r\n    BJ: \"Benin\",\r\n    BT: \"Bhutan\",\r\n    BO: \"Bolivia\",\r\n    BA: \"Bosnia and Herzegovina\",\r\n    BW: \"Botswana\",\r\n    BR: \"Brazil\",\r\n    BN: \"Brunei Darussalam\",\r\n    BG: \"Bulgaria\",\r\n    BF: \"Burkina Faso\",\r\n    BI: \"Burundi\",\r\n    KH: \"Cambodia\",\r\n    CM: \"Cameroon\",\r\n    CA: \"Canada\",\r\n    CI: \"Ivory Coast\",\r\n    CF: \"Central African Republic\",\r\n    TD: \"Chad\",\r\n    CL: \"Chile\",\r\n    CN: \"China\",\r\n    CO: \"Colombia\",\r\n    CG: \"Congo\",\r\n    CD: \"Democratic Republic of Congo\",\r\n    CR: \"Costa Rica\",\r\n    HR: \"Croatia\",\r\n    CU: \"Cuba\",\r\n    CY: \"Cyprus\",\r\n    CZ: \"Czech Republic\",\r\n    DK: \"Denmark\",\r\n    DP: \"Diamond Princess\",\r\n    DJ: \"Djibouti\",\r\n    DO: \"Dominican Republic\",\r\n    EC: \"Ecuador\",\r\n    EG: \"Egypt\",\r\n    SV: \"El Salvador\",\r\n    GQ: \"Equatorial Guinea\",\r\n    ER: \"Eritrea\",\r\n    EE: \"Estonia\",\r\n    ET: \"Ethiopia\",\r\n    FK: \"Falkland Islands\",\r\n    FJ: \"Fiji\",\r\n    FI: \"Finland\",\r\n    FR: \"France\",\r\n    GF: \"French Guiana\",\r\n    TF: \"French Southern Territories\",\r\n    GA: \"Gabon\",\r\n    GM: \"Gambia\",\r\n    GE: \"Georgia\",\r\n    DE: \"Germany\",\r\n    GH: \"Ghana\",\r\n    GR: \"Greece\",\r\n    GL: \"Greenland\",\r\n    GT: \"Guatemala\",\r\n    GN: \"Guinea\",\r\n    GW: \"Guinea-Bissau\",\r\n    GY: \"Guyana\",\r\n    HT: \"Haiti\",\r\n    HN: \"Honduras\",\r\n    HK: \"Hong Kong\",\r\n    HU: \"Hungary\",\r\n    IS: \"Iceland\",\r\n    IN: \"India\",\r\n    ID: \"Indonesia\",\r\n    IR: \"Iran\",\r\n    IQ: \"Iraq\",\r\n    IE: \"Ireland\",\r\n    IL: \"Israel\",\r\n    IT: \"Italy\",\r\n    JM: \"Jamaica\",\r\n    JP: \"Japan\",\r\n    JO: \"Jordan\",\r\n    KZ: \"Kazakhstan\",\r\n    KE: \"Kenya\",\r\n    XK: \"Kosovo\",\r\n    KW: \"Kuwait\",\r\n    KG: \"Kyrgyzstan\",\r\n    LA: \"Lao\",\r\n    LV: \"Latvia\",\r\n    LB: \"Lebanon\",\r\n    LS: \"Lesotho\",\r\n    LR: \"Liberia\",\r\n    LY: \"Libya\",\r\n    LT: \"Lithuania\",\r\n    LU: \"Luxembourg\",\r\n    MK: \"Macedonia\",\r\n    MG: \"Madagascar\",\r\n    MW: \"Malawi\",\r\n    MY: \"Malaysia\",\r\n    ML: \"Mali\",\r\n    MR: \"Mauritania\",\r\n    MX: \"Mexico\",\r\n    MD: \"Moldova\",\r\n    MN: \"Mongolia\",\r\n    ME: \"Montenegro\",\r\n    MA: \"Morocco\",\r\n    MZ: \"Mozambique\",\r\n    MM: \"Myanmar\",\r\n    NA: \"Namibia\",\r\n    NP: \"Nepal\",\r\n    NL: \"Netherlands\",\r\n    NC: \"New Caledonia\",\r\n    NZ: \"New Zealand\",\r\n    NI: \"Nicaragua\",\r\n    NE: \"Niger\",\r\n    NG: \"Nigeria\",\r\n    KP: \"North Korea\",\r\n    NO: \"Norway\",\r\n    OM: \"Oman\",\r\n    PK: \"Pakistan\",\r\n    PS: \"Palestine\",\r\n    PA: \"Panama\",\r\n    PG: \"Papua New Guinea\",\r\n    PY: \"Paraguay\",\r\n    PE: \"Peru\",\r\n    PH: \"Philippines\",\r\n    PL: \"Poland\",\r\n    PT: \"Portugal\",\r\n    PR: \"Puerto Rico\",\r\n    QA: \"Qatar\",\r\n    RO: \"Romania\",\r\n    RU: \"Russia\",\r\n    RW: \"Rwanda\",\r\n    SA: \"Saudi Arabia\",\r\n    SN: \"Senegal\",\r\n    RS: \"Serbia\",\r\n    SL: \"Sierra Leone\",\r\n    SG: \"Singapore\",\r\n    SK: \"Slovakia\",\r\n    SI: \"Slovenia\",\r\n    SB: \"Solomon Islands\",\r\n    SO: \"Somalia\",\r\n    ZA: \"South Africa\",\r\n    KR: \"South Korea\",\r\n    SS: \"South Sudan\",\r\n    ES: \"Spain\",\r\n    LK: \"Sri Lanka\",\r\n    SD: \"Sudan\",\r\n    SR: \"Suriname\",\r\n    SJ: \"Svalbard and Jan Mayen\",\r\n    SZ: \"Swaziland\",\r\n    SE: \"Sweden\",\r\n    CH: \"Switzerland\",\r\n    SY: \"Syrian Arab Republic\",\r\n    TW: \"Taiwan\",\r\n    TJ: \"Tajikistan\",\r\n    TZ: \"Tanzania\",\r\n    TH: \"Thailand\",\r\n    TL: \"Timor-Leste\",\r\n    TG: \"Togo\",\r\n    TT: \"Trinidad and Tobago\",\r\n    TN: \"Tunisia\",\r\n    TR: \"Turkey\",\r\n    TM: \"Turkmenistan\",\r\n    AE: \"UAE\",\r\n    UG: \"Uganda\",\r\n    GB: \"United Kingdom\",\r\n    UA: \"Ukraine\",\r\n    US: \"USA\",\r\n    UY: \"Uruguay\",\r\n    UZ: \"Uzbekistan\",\r\n    VU: \"Vanuatu\",\r\n    VE: \"Venezuela\",\r\n    VN: \"Vietnam\",\r\n    EH: \"Western Sahara\",\r\n    YE: \"Yemen\",\r\n    ZM: \"Zambia\",\r\n    ZW: \"Zimbabwe\",\r\n};","import React, {useState, createContext} from 'react';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const CountryDataProvider = (props) => {\r\n    const [countryData, setCountryData] = useState({});\r\n    const [timelineData, setTimelineData] = useState({});\r\n    const [country, setCountry] = useState(localStorage.getItem(\"country\"));\r\n    const [status, setStatus] = useState(\"loading\");\r\n\r\n    return (\r\n        <AppContext.Provider value={[\r\n            countryData,\r\n            setCountryData,\r\n            timelineData,\r\n            setTimelineData,\r\n            country,\r\n            setCountry,\r\n            status,\r\n            setStatus,\r\n        ]}>{props.children}\r\n        </AppContext.Provider>\r\n    )\r\n};","import React, {useContext} from 'react';\r\nimport {countriesData} from \"../../data/countriesData\";\r\nimport {DropdownButton, Dropdown} from \"react-bootstrap\";\r\nimport {AppContext} from \"../../contexts/AppContext\";\r\nimport {isLoading} from \"../../common/LoadingStatus\";\r\n\r\nconst Header = () => {\r\n    const [countryData,\r\n        setCountryData,\r\n        timelineData,\r\n        setTimelineData,\r\n        country,\r\n        setCountry,\r\n        status,\r\n        setStatus] = useContext(AppContext);\r\n\r\n    const handleDropdownItemClick = (countryKey) => {\r\n        localStorage.setItem(\"country\", countryKey);\r\n        setCountry(countryKey);\r\n        setStatus(isLoading);\r\n    }\r\n\r\n    return (\r\n        <div style={{marginBottom: \"8px\"}}>\r\n            <h1>Corona Tracker BG</h1>\r\n            <h5>Следи случаите на COVID-19 в реално време по света и у нас</h5>\r\n            <h4>{new Date().toLocaleDateString(country)}</h4>\r\n            <hr/>\r\n            <DropdownButton\r\n                id=\"dropdown-basic-button\"\r\n                variant=\"secondary\"\r\n                size=\"lg\"\r\n                title={countriesData[country]}>\r\n                {Object.keys(countriesData).map(key => {\r\n                    return (\r\n                        <Dropdown.Item\r\n                            onClick={() => handleDropdownItemClick(key)}\r\n                            key={key}>{countriesData[key]}\r\n                        </Dropdown.Item>\r\n                    )\r\n                })}\r\n            </DropdownButton>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Header;","export const isLoading = \"loading\";\r\n\r\nexport const isLoaded = \"loaded\";\r\n\r\nexport const isError = \"error\";\r\n","import React, {useContext, useEffect, useState} from \"react\";\r\nimport Chart from 'react-apexcharts'\r\nimport {AppContext} from \"../contexts/AppContext\";\r\n\r\nconst ChartsContainer = () => {\r\n    const [countryData,\r\n        setCountryData,\r\n        timelineData,\r\n        setTimelineData,\r\n        country,\r\n        setCountry,\r\n        status,\r\n        setStatus] = useContext(AppContext);\r\n\r\n    const [componentState, setComponentState] = useState({\r\n        totalCasesChart: {\r\n            series: [{\r\n                data: []\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: true,\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                }\r\n            },\r\n        },\r\n        totalDeathCasesChart: {\r\n            series: [{\r\n                data: []\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: true,\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                }\r\n            },\r\n        },\r\n        totalRecoveredCasesChart: {\r\n            series: [{\r\n                data: []\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: true,\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                }\r\n            },\r\n        },\r\n        totalActiveCasesChart: {\r\n            series: [{\r\n                data: []\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: true,\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                }\r\n            },\r\n        },\r\n        newCasesChart: {\r\n            series: [{\r\n                data: []\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: true,\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                xaxis: {\r\n                    categories: [],\r\n                }\r\n            },\r\n        },\r\n\r\n\r\n    });\r\n\r\n    const formatDate = (dateString) => {\r\n        //Format date from \"1/23/2020\" to \"23/01\"\r\n        const dateParams = dateString.split('/');\r\n        return `${dateParams[1]}/${dateParams[0]}`;\r\n    };\r\n\r\n    const sortObject = (o) => {\r\n        return Object.keys(o).sort().reduce((r, k) => (r[k] = o[k], r), {});\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(timelineData).length <= 0) return undefined;\r\n\r\n        const timelineItems = timelineData.timeline;\r\n        /* ***********Extract data for chart ********** */\r\n        let skipEmptyDays = true;\r\n        let old_total_cases = null;\r\n\r\n        let datesArr = [];\r\n        let totalCasesArr = [];\r\n        let newCasesArr = [];\r\n        let totalActiveCasesArr = [];\r\n\r\n        const timelineItemsSorted = sortObject(timelineItems);\r\n        const numberOfDates = Object.keys(timelineItemsSorted).length;\r\n\r\n        let lastIndex = 0;\r\n        let lastTotalCases = 0;\r\n        Object.keys(timelineItemsSorted).forEach((date, index) => {\r\n            //date = key\r\n            const dayInfo = timelineItemsSorted[date];\r\n\r\n            const totalCases = Math.abs(dayInfo.total_cases);\r\n            //calculate new daily cases since API is unreliable\r\n            let newDailyCases = 0;\r\n            if (index > lastIndex) {\r\n                newDailyCases = Math.abs(lastTotalCases - totalCases);\r\n\r\n                lastIndex = index;\r\n                lastTotalCases = totalCases;\r\n            }\r\n            const recoveredCases = Math.abs(dayInfo.total_recoveries);\r\n            const deathCases = Math.abs(dayInfo.total_deaths);\r\n            const activeCases = totalCases - (recoveredCases + deathCases);\r\n\r\n\r\n            if (totalCases > 0) skipEmptyDays = false;\r\n            //Skip days with no data and the last two entries\r\n            if (!skipEmptyDays && index < numberOfDates) {\r\n                datesArr.push(date);\r\n                totalCasesArr.push(totalCases);\r\n                totalActiveCasesArr.push(activeCases);\r\n                newCasesArr.push(newDailyCases);\r\n            }\r\n        });\r\n\r\n\r\n        //Update components\r\n        const {\r\n            totalCasesChart,\r\n            totalDeathCasesChart,\r\n            totalRecoveredCasesChart,\r\n            totalActiveCasesChart,\r\n            newCasesChart\r\n        } = componentState;\r\n\r\n        setComponentState({\r\n            totalCasesChart: {\r\n                ...totalCasesChart,\r\n                series: [{\r\n                    ...totalCasesChart.series,\r\n                    data: totalCasesArr,\r\n                }],\r\n                options: {\r\n                    ...totalCasesChart.options,\r\n                    xaxis: {\r\n                        categories: datesArr,\r\n                    }\r\n                }\r\n            },\r\n            totalActiveCasesChart: {\r\n                ...totalActiveCasesChart,\r\n                series: [{\r\n                    ...totalActiveCasesChart.series,\r\n                    data: totalActiveCasesArr,\r\n                }],\r\n                options: {\r\n                    ...totalActiveCasesChart.options,\r\n                    xaxis: {\r\n                        categories: datesArr,\r\n                    }\r\n                }\r\n            },\r\n            newCasesChart: {\r\n                ...newCasesChart,\r\n                series: [{\r\n                    ...newCasesChart.series,\r\n                    data: newCasesArr,\r\n                }],\r\n                options: {\r\n                    ...newCasesChart.options,\r\n                    xaxis: {\r\n                        categories: datesArr,\r\n                    }\r\n                }\r\n            },\r\n        });\r\n    }, [timelineData]);\r\n\r\n    const calculateElementHeight = () => {\r\n        const datesNumber = componentState.totalCasesChart.series[0].data.length;\r\n        return datesNumber * 20;\r\n    };\r\n\r\n    return (\r\n        <div className=\"text-center\">\r\n            <span><strong>Общ брой случаи по дата:</strong></span>\r\n            <Chart options={componentState.totalCasesChart.options}\r\n                   series={componentState.totalCasesChart.series}\r\n                   type=\"bar\"\r\n                   width={\"100%\"}\r\n                   height={calculateElementHeight()}\r\n            />\r\n            <span><strong>Активни случаи по дата:</strong></span>\r\n            <Chart options={componentState.totalActiveCasesChart.options}\r\n                   series={componentState.totalActiveCasesChart.series}\r\n                   type=\"bar\"\r\n                   width={\"100%\"}\r\n                   height={calculateElementHeight()}\r\n            />\r\n            <span><strong>Нови случаи по дата:</strong></span>\r\n            <Chart options={componentState.newCasesChart.options}\r\n                   series={componentState.newCasesChart.series}\r\n                   type=\"bar\"\r\n                   width={\"100%\"}\r\n                   height={calculateElementHeight()}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChartsContainer;","import React, {useContext, useEffect, useMemo} from 'react';\r\nimport {AppContext} from \"../../contexts/AppContext\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport ChartsContainer from \"../ChartsContainer\";\r\nimport {isError, isLoaded, isLoading} from \"../../common/LoadingStatus\";\r\n\r\nconst Tracker = (props) => {\r\n    const [countryData,\r\n        setCountryData,\r\n        timelineData,\r\n        setTimelineData,\r\n        country,\r\n        setCountry,\r\n        status,\r\n        setStatus] = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        if (status !== \"loading\") {\r\n            return\r\n        }\r\n\r\n        /* **************** SET TODAY DATA **************** */\r\n        if (country === \"GLOBAL\") {\r\n            /* **************** GLOBAL DATA IS RECEIVED AS STREAM **************** */\r\n            const fetchDataGlobal = async () => {\r\n                const globalDataResult = await fetch(\r\n                    'https://api.thevirustracker.com/free-api?global=stats', {})\r\n                    .then(res => res.body)\r\n                    .then(body => {\r\n                        const reader = body.getReader();\r\n                        return reader\r\n                            .read()\r\n                            .then(({done, value}) => {\r\n                                if (done) {\r\n                                    reader.close();\r\n                                }\r\n\r\n                                let str = \"\";\r\n                                for (let i = 0; i < value.length; i++) {\r\n                                    str += String.fromCharCode(parseInt(value[i]));\r\n                                }\r\n                                return JSON.parse(str);\r\n                            });\r\n                    })\r\n                    .then(json => {\r\n                        return json.results[0];\r\n                    });\r\n\r\n                setCountryData(globalDataResult);\r\n                console.log(globalDataResult);\r\n                return true;\r\n            };\r\n            fetchDataGlobal()\r\n                .then(r => {\r\n                    if (r === true) {\r\n                        setStatus(isLoaded);\r\n                    }\r\n                });\r\n        } else {\r\n            const fetchData = async () => {\r\n                const countryDataResult = await fetch(`https://api.thevirustracker.com/free-api?countryTotal=${country}`)\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        return json;\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e);\r\n                        setStatus(isError);\r\n                        return {};\r\n                    });\r\n\r\n                const countryData = countryDataResult[\"countrydata\"][0];\r\n                setCountryData(countryData);\r\n\r\n                const timelineItemsResult = await fetch(`https://api.thevirustracker.com/free-api?countryTimeline=${country}`)\r\n                    .then(res => res.json())\r\n                    .then(json => {\r\n                        return json;\r\n                    })\r\n                    .catch(e => {\r\n                        console.log(e);\r\n                        return {};\r\n                    });\r\n\r\n                const countryInfo = timelineItemsResult[\"countrytimelinedata\"][0][\"info\"];\r\n                const timelineItems = timelineItemsResult[\"timelineitems\"][0];\r\n\r\n                let timelineItemsFormated = {};\r\n\r\n                //Format date from \"3/31/20\" to \"03-30\". Note the substracting of 1 day due to incorrect api data.\r\n                Object.keys(timelineItems).forEach(date => {\r\n                    const item = timelineItems[date];\r\n                    if (date !== \"stat\") {\r\n                        const dateFormatted = new Date(Date.parse(date)).toISOString().slice(5, 10);\r\n                        timelineItemsFormated[dateFormatted] = item\r\n                    }\r\n                });\r\n\r\n                //Format data for context items\r\n                const timelineData = {\r\n                    country: countryInfo.title,\r\n                    countryCode: countryInfo.code,\r\n                    timeline: timelineItemsFormated,\r\n                };\r\n\r\n                setTimelineData(timelineData);\r\n\r\n                return true;\r\n            };\r\n            fetchData()\r\n                .then(r => {\r\n                    if (r === true) {\r\n                        setStatus(isLoaded);\r\n                    }\r\n                });\r\n        }\r\n    }, [status]);\r\n\r\n\r\n    const {\r\n        total_cases,\r\n        total_recovered,\r\n        total_unresolved,\r\n        total_deaths,\r\n        total_new_cases_today,\r\n        total_new_deaths_today,\r\n        total_active_cases,\r\n        total_serius_cases,\r\n    } = countryData;\r\n\r\n    let deathPerc = ((total_deaths / total_cases) * 100).toFixed(2);\r\n    deathPerc = isFinite(deathPerc) ? deathPerc : 0;\r\n\r\n    let recPerc = ((total_recovered / total_cases) * 100).toFixed(2);\r\n    recPerc = isFinite(recPerc) ? recPerc : 0;\r\n\r\n    let newPerc = ((total_new_cases_today / total_cases) * 100).toFixed(2);\r\n    newPerc = isFinite(newPerc) ? newPerc : 0;\r\n\r\n    const countryHasData =\r\n        (!(Object.keys(countryData).length === 0 && Object.keys(timelineData).length === 0));\r\n\r\n    return (useMemo(() => {\r\n        if (status === isLoading) {\r\n            return (<h4>Зареждане...</h4>);\r\n        } else if (status === isLoaded) {\r\n            if (!countryHasData) {\r\n                return <h4>Няма данни</h4>\r\n            }\r\n            return (\r\n                <div>\r\n                    <Alert variant=\"secondary\">\r\n                        <Alert.Heading>Общ брой случаи: {total_cases}</Alert.Heading>\r\n                    </Alert>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading>Починали: {total_deaths} ({deathPerc}%)</Alert.Heading>\r\n                    </Alert>\r\n                    <Alert variant=\"success\">\r\n                        <Alert.Heading>Излекувани: {total_recovered} ({recPerc}%)</Alert.Heading>\r\n                    </Alert>\r\n                    <hr/>\r\n                    <Alert variant=\"primary\">\r\n                        <Alert.Heading>Активни случаи: {total_active_cases}</Alert.Heading>\r\n                    </Alert>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading>Нови случаи (днес): {total_new_cases_today} (+{newPerc}%)</Alert.Heading>\r\n                    </Alert>\r\n                    <Alert variant=\"danger\">\r\n                        <Alert.Heading>Смъртни случаи (днес): {total_new_deaths_today}</Alert.Heading>\r\n                    </Alert>\r\n                    {\r\n                        country === \"GLOBAL\"\r\n                            ?\r\n                            <h4>\r\n                                <a href=\"https://www.worldometers.info/coronavirus/\" target=\"_blank\">\r\n                                    За таблица виж тук: www.worldometers.info/coronavirus/\r\n                                </a>\r\n                            </h4>\r\n                            :\r\n                            <ChartsContainer/>\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return (<h4>Грешка при зареждането, моля опитайте по-късно.</h4>)\r\n        }\r\n    }, [status]));\r\n};\r\n\r\nexport default Tracker;","import React, {useEffect, useState} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\n\r\nimport Footer from \"./components/Footer/Footer\";\r\nimport Header from \"./components/Header/Header\";\r\nimport Tracker from \"./components/Tracker/Tracker\";\r\nimport {CountryDataProvider} from \"./contexts/AppContext\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <CountryDataProvider>\r\n            <div className=\"container text-center\">\r\n                <Header/>\r\n                <Tracker/>\r\n                <Footer/>\r\n            </div>\r\n        </CountryDataProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n/*\r\n* Initialise local storage\r\n* for storing last selected country\r\n*/\r\n\r\nif (!localStorage.getItem(\"country\")) {\r\n    localStorage.setItem(\"country\", \"BG\")\r\n}\r\n\r\n/* Render app */\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}